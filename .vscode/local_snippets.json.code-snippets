{
	// Place your warlock++ workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	
	"Coplien": {
		"prefix":["keklien"],
		"body": [
			"class $TM_FILENAME_BASE {\npublic:",
			"\t$TM_FILENAME_BASE()",
			"\t{",
			"\t}",

			"\t$TM_FILENAME_BASE(const $TM_FILENAME_BASE& other){ *this = other; };",

			"\t$TM_FILENAME_BASE& operator=(const $TM_FILENAME_BASE& other){",
			"\t\tif (this == &other)",
			"\t\t\treturn *this;",
			"\t\treturn *this;",
			"\t}",

			"\t~$TM_FILENAME_BASE(){}",
			"};"
		]
	},
	"kekers": {
		"prefix": ["kekers", "lol"],
		"body": [
			"${1:/*type*/}& get${3:/*name*/} ()const {",
			"\treturn this->${2:/*name*/};",
			"}",
			"void set${3:/*name*/} (${1:/*type*/) ${2:/*name*/}) {",
			"\tthis->${2:/*name*/} = ${2:/*name*/};",
			"}"
		]
	}
}

